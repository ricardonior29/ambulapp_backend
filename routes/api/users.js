const express = require("express");
const router = express.Router();
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const keys = require("../../config/keys");

// Load input validation
const validateLoginInput = require("../../validation/login");

// Load Ambulancia model
const Ambulancia = require("../../models/Ambulancia");
const CentroMedico = require("../../models/CentroMedico");

// @route POST api/users/login
// @desc Login Ambulancia or Centro Medico and return JWT token
// @access Public
router.post("/login", (req, res) => {
  // Form validation
  const { errors, isValid } = validateLoginInput(req.body);

  // Check validation
  if (!isValid) {
    console.log(errors);
    return res.status(400).json(errors);
  }

  const email = req.body.email;
  const password = req.body.password;

  // Find ambulancia by email
  Ambulancia.findOne({ email }).then(ambulancia => {
    // Check if ambulancia exists
    if (!ambulancia) {

      CentroMedico.findOne({ email }).then(centromedico => {

        if (!centromedico) {
          return res.status(404).json({ email: "El correo electr칩nico ingresado no existe" });
        }

        // If centromedico exists, use bcryptjs to compare submitted password with hashed password in our database
        bcrypt.compare(password, centromedico.password).then(isMatch => {
          if (isMatch) {
            // centro Medico matched
            // Create JWT Payload
            const payload = {
              id: centromedico.id,
              nombre: centromedico.nombre,
              direccion: centromedico.direccion,
              latitud: centromedico.latitud,
              longitud: centromedico.longitud,
            };

            // Sign token
            jwt.sign(
              payload,
              keys.secretOrKey,
              {
                expiresIn: 31556926, // 1 year in seconds
              },
              (err, token) => {
                res.json({
                  isambulance: false,
                  success: true,
                  token: "Bearer " + token, // The bearer token is a cryptic string, usually generated by the server in response to a login request. The client must send this token in the Authorization header when making requests to protected resources
                });
              }
            );
          } else {
            return res
              .status(400)
              .json({ password: "Contrase침a incorrecta" });
          }
        });
      });
      //return res.status(404).json({ emailnotfound: "El correo electr칩nico ingresado no existe" });
    }

    else {
      // If ambulancia exists, use bcryptjs to compare submitted password with hashed password in our database
      bcrypt.compare(password, ambulancia.password).then(isMatch => {
        if (isMatch) {
          // Ambulancia matched
          // Create JWT Payload
          const payload = {
            id: ambulancia.id,
            placa: ambulancia.placa,
          };

          // Sign token
          jwt.sign(
            payload,
            keys.secretOrKey,
            {
              expiresIn: 31556926, // 1 year in seconds
            },
            (err, token) => {
              res.json({
                isambulance: true,
                success: true,
                token: "Bearer " + token, // The bearer token is a cryptic string, usually generated by the server in response to a login request. The client must send this token in the Authorization header when making requests to protected resources
              });
            }
          );
        } else {
          return res
            .status(400)
            .json({ password: "Contrase침a incorrecta" });
        }
      });
    }
  });
});

module.exports = router;
